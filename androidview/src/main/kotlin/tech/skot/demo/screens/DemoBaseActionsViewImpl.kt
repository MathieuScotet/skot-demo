// //### First generated by SKot but then you can (have to) edit, the main constructor only will modifyed by generator if needed
package tech.skot.demo.screens

import tech.skot.view.extensions.setOnClick
import tech.skot.view.extensions.setVisible
import kotlin.Function0
import kotlin.Unit

class DemoBaseActionsViewImpl(
  onTapAlert: Function0<Unit>,
  onTapBack: Function0<Unit>,
  onTapConfirm: Function0<Unit>,
  onTapOpenExternalNavigator: Function0<Unit>,
  onTapShortSnack: Function0<Unit>,
  onTapSnack: Function0<Unit>
) : DemoBaseActionsViewImplGen(onTapAlert, onTapBack, onTapConfirm, onTapOpenExternalNavigator,
    onTapShortSnack, onTapSnack) {

  override fun onOnTapBack(onTapBack: () -> Unit) {
    binding.btnBack.setOnClick(onTapBack)
  }

  override fun onOnTapAlert(onTapAlert: Function0<Unit>) {
    binding.btnAlert.setOnClick(onTapAlert)
  }

  override fun onOnTapConfirm(onTapConfirm: Function0<Unit>) {
    binding.btnConfirm.setOnClick(onTapConfirm)
  }

  override fun onOnTapOpenExternalNavigator(onTapOpenExternalNavigator: Function0<Unit>) {
    binding.btnOpenExternal.setOnClick(onTapOpenExternalNavigator)
  }

  override fun onOnTapSnack(onTapSnack: Function0<Unit>) {
    binding.btnSnack.setOnClick(onTapSnack)
  }

  override fun onOnTapShortSnack(onTapShortSnack: () -> Unit) {
    binding.btnSnackShort.setOnClick(onTapShortSnack)
  }

  override fun onLoading(loading: Boolean) {
    binding.progressBar.root.setVisible(loading)
  }
}
